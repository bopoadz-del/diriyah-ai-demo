"""Excel spreadsheet extraction utilities.

This module converts Microsoft Excel workbooks into a plain text
representation by concatenating the values from every sheet.  It
leverages the ``openpyxl`` library to parse the workbook in memory.
If parsing fails, an empty string is returned.
"""

from __future__ import annotations

import io
from typing import Optional

# The openpyxl library is optional.  It is imported lazily inside the
# extraction function.  If unavailable, the extractor simply returns
# an empty string instead of raising.


def extract_excel_bytes(data: bytes) -> str:
    """Extract plain text from an Excel workbook represented by raw bytes.

    Args:
        data: Raw XLSX data.

    Returns:
        A newline separated string containing all cell values from all
        sheets.  If ``openpyxl`` is not installed or the workbook
        cannot be loaded, returns an empty string.
    """
    try:
        from openpyxl import load_workbook  # type: ignore
    except Exception:
        return ""
    try:
        buf = io.BytesIO(data)
        wb = load_workbook(buf, data_only=True)
        parts = []
        for ws in wb.worksheets:
            for row in ws.iter_rows(values_only=True):
                for cell in row:
                    if cell is None:
                        continue
                    parts.append(str(cell))
        return "\n".join(parts)
    except Exception:
        return ""

"""PDF extraction utilities.

This module uses the ``pypdf`` library to extract text from PDF files.
The extraction operates on in‑memory byte data to avoid writing
temporary files to disk.  If extraction fails, an empty string is
returned.
"""

from __future__ import annotations

import io
from typing import Optional

# The pypdf library is optional.  It is imported lazily inside the
# extraction function to allow the module to be imported even if
# pypdf is not installed in the environment.  If pypdf is missing,
# the extractor will return an empty string rather than raising.


def extract_pdf_bytes(data: bytes) -> str:
    """Extract plain text from a PDF represented by raw bytes.

    The function attempts to import ``pypdf.PdfReader`` and will
    gracefully handle the absence of the dependency by returning an
    empty string.  If a PDF is successfully parsed, all page text is
    concatenated with newlines.

    Args:
        data: Raw PDF data.

    Returns:
        A single string containing the concatenated text of all pages.
        If the PDF cannot be read or the library is missing, returns
        an empty string.
    """
    try:
        from pypdf import PdfReader  # type: ignore
    except Exception:
        return ""
    try:
        reader = PdfReader(io.BytesIO(data))
        pages = [p.extract_text() or "" for p in reader.pages]
        return "\n".join(pages)
    except Exception:
        return ""

"""Top‑level extractor functions for converting various document formats into
plain text.  This module exposes a single entry point ``extract_from_bytes``
that dispatches to the appropriate format specific parser based on the
provided MIME type.

Supported formats include:
    * PDF (application/pdf) – extracted with ``pypdf``.
    * Word (application/vnd.openxmlformats-officedocument.wordprocessingml.document,
      application/msword) – extracted with ``python‑docx``.
    * Excel (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
      – extracted with ``openpyxl`` by concatenating all sheet cell values.
    * CSV (text/csv) – decoded as UTF‑8 and returned directly.
    * Plain text (text/plain) – returned directly.

If the MIME type is not recognised, the extractor attempts to decode the
bytes as UTF‑8.  For any unsupported binary formats it returns an empty
string.
"""

from __future__ import annotations

import csv
import io
from typing import Callable, Dict

from .pdf_extractor import extract_pdf_bytes
from .docx_extractor import extract_docx_bytes
from .excel_extractor import extract_excel_bytes

# Mapping of MIME types to extractor functions
_EXTRACTORS: Dict[str, Callable[[bytes], str]] = {
    "application/pdf": extract_pdf_bytes,
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": extract_docx_bytes,
    "application/msword": extract_docx_bytes,
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": extract_excel_bytes,
    "text/csv": lambda data: data.decode("utf-8", errors="ignore"),
    "text/plain": lambda data: data.decode("utf-8", errors="ignore"),
}


def extract_from_bytes(mime_type: str, data: bytes) -> str:
    """Return plain text extracted from ``data`` based on ``mime_type``.

    This function looks up the appropriate format specific extractor.  If
    no extractor is registered for the given MIME type, it falls back to
    decoding the bytes as UTF‑8.  Binary formats that cannot be decoded
    return an empty string.

    Args:
        mime_type: The MIME type string reported by Google Drive.
        data: Raw bytes of the file content.

    Returns:
        Extracted plain text or an empty string if extraction failed.
    """
    extractor = _EXTRACTORS.get(mime_type)
    try:
        if extractor:
            return extractor(data) or ""
        # Unknown type – attempt to decode as UTF‑8
        return data.decode("utf-8", errors="ignore")
    except Exception:
        return ""

"""DOCX extraction utilities.

This module extracts text from Microsoft Word documents in ``.docx``
format using the ``python‑docx`` library.  It operates on bytes held
in memory and returns a plain text representation of the document.
"""

from __future__ import annotations

import io
from typing import Optional

# The python-docx library is optional.  It is imported lazily inside
# the extraction function.  If unavailable, the extractor falls back
# to UTF‑8 decode and returns the raw text if possible.


def extract_docx_bytes(data: bytes) -> str:
    """Extract plain text from a DOCX represented by raw bytes.

    Args:
        data: Raw DOCX data.

    Returns:
        Concatenated paragraph text from the document, or if
        ``python-docx`` is not installed, attempts to decode the
        content as UTF‑8.  In case of any failure, returns an empty
        string.
    """
    try:
        from docx import Document  # type: ignore
    except Exception:
        # If python-docx is not available, attempt to decode the raw
        # bytes as text directly.  Most docx files are ZIP archives so
        # this will not produce useful content, but it avoids raising.
        try:
            return data.decode("utf-8", errors="ignore")
        except Exception:
            return ""
    try:
        buf = io.BytesIO(data)
        doc = Document(buf)
        return "\n".join(paragraph.text for paragraph in doc.paragraphs)
    except Exception:
        return ""
